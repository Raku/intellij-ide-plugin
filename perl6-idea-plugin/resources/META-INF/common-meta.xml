<idea-plugin xmlns:xi="http://www.w3.org/2001/XInclude">
  <id>edument.perl6-idea-plugin</id>
  <name>Comma (Perl 6 Language Support)</name>
  <version>2018.12.1</version>
  <vendor email="info@commaide.com" url="https://commaide.com/">Edument Central Europe sro.</vendor>

  <description><![CDATA[
<h1>Comma</h1>

<p>
  The Comma plugin provides Perl 6 language support for IDEA-based IDEs, such as IntelliJ.
  Features include:
</p>

<ul>
  <li>Project templates</li>
  <li>Syntax highlighting</li>
  <li>Auto-completion of various program elements</li>
  <li>Numerous code navigation features</li>
  <li>Running tests and code</li>
</ul>

<p>
  The same functionality is also available as an independent IDE. For more details, see
  <a href="https://commaide.com/">the Comma website</a>.
</p>
    ]]></description>

  <change-notes><![CDATA[
<ul>
    <li>Implement Smart Enter (Ctrl+Shift+Enter), which can be used to complete
        statements in various ways. For example, typing 'class Foo' and then
        pressing Ctrl+Shift+Enter will insert the curly braces for the class body
        and then place the caret within the class body. The feature works on a
        range of constructs.</li>
    <li>Correctly handle lexical term declarations with the current compilation
        unit. Previously, a declaration like 'my \foo = 42' would not cause a
        mention of 'foo' later on in that scope to recognize it as a term, and it
        would instead be considered an undeclared routine. Reference resolution
        and auto-complete now also works for these kinds of declaration.</li>
    <li>Implement Context Info (Alt+Q). Pressing this when in a routine will, if
        the routine starts off the top of the screen, show the routine's name and
        signature. The same happens with the current package (if in a method that
        has its starting line off screen, Alt+Q first shows the method declaration,
        and then pressing it again shows the class declaration).</li>
    <li>Add detection of various mis-uses of the 'return' statement, for example
        outside of a routine or inside of a 'start' block.</li>
    <li>Mark unclosed parentheses, brackets, and curlies as errors.</li>
    <li>Include routine names in the stack trace shown by the debugger.</li>
    <li>When a test fails with got/expected, offer a visual diff interface to help
        one find the differences.</li>
    <li>In the test results interface, make it possible to right-click on a test file
        and Go To Source (also available as Ctrl+Enter when the test file is selected).</li>
    <li>Collect non-TAP stdout and stderr produced by running tests, and
        show it in the test output console.</li>
    <li>When adding a New Module, also offer to stub a class, role, grammar, or module
        inside of it, with the option to make it unit scoped. This avoids typing the
        module name a second time inside of the created file.</li>
    <li>Make sure that an opening comment inside of a block gets the indentation
        level of the block it is in when reformatting code, not that of its parent.</li>
    <li>Fix a lexer bug involving literals passed to parametric roles.</li>
    <li>Properly report SDK not being set when the user tries to debug a program (this
        was correctly reported for Run, but not Debug).</li>
    <li>Make the test runner script robust in the face of calls to <code>flush</code> failing.</li>
    <li>Fix a bug where constant extraction would work perfectly well, but then show
        an error message claiming it hadn't worked.</li>
    <li>Make sure the error on missing module dependency is immediately removed after
        applying the quick-fix to add it to META6.json.</li>
    <li>Fix an exception in 'monitor' usage annotator when 'use' statement
        is present with a non-module name (e.g. <code>use v6.d.PREVIEW;</code>). Also,
        do not duplicate <code>OO::Monitors</code> in module 'depends' if present
        already.</li>
    <li>Fix an exception on attempt to infer type of variables with
        assignment when inplace comments are present.</li>
    <li>Fix a number of issues caused by attempts to rename any Perl 6 file
        the same way as a Perl 6 module is, now "module-like" behavior is
        reserved for Perl 6 modules under <code>lib</code> source root.</li>
    <li>Fix error message on attempt to rename a non-private method.</li>
    <li>Moving and renaming directories that contain Perl 6 modules under
        <code>lib</code> source root updates META6.json <code>provides</code> section now.</li>
    <li>During module creation, opening or import, if present, <code>bin</code> directory is added as a
        source root. Test <code>t</code> source root is marked as test one.</li>
    <li>When a project is opened with <code>Open</code> action, source roots are
        correctly set based on directory content.</li>
    <li>Perl 6 module metadata file errors either syntax (such as incorrect
        JSON) or logical (e.g. having <code>provides</code> section not being an object
        with string values) are now displayed on project opening or
        META6.json saving.</li>
    <li>Show a warning if obsolete module meta filename (<code>META.info</code>) is
        being used and offer renaming it into <code>META6.json</code>.</li>
    <li>In order to get future support of projects with multiple modules,
        actions <code>New Module</code>, <code>New test</code> and <code>New Script</code> are now accessible
        in <code>File | New...</code> menu only if possible root directory or sibling
        file is selected in Project IDEA view and so new file path is not
        based on project root anymore.</li>
    <li>Use normalization of module names, which makes 'use' annotator
        correctly work with, for example, <code>Foo::Bar:ver&lt;0.5&gt;</code> specified in
        META6.json.</li>
    <li>IDEA's Project view is now updated when a Perl 6 module file is
        created or removed.</li>
    <li>As renaming local module by 'use' element renaming modifies project
        file tree, now Perl 6 module file moving does not cause an
        exception and updates all 'use' references.</li>
</ul>
    ]]>
  </change-notes>

  <!-- please see http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/build_number_ranges.html for description -->
  <idea-version since-build="145.0"/>

  <!-- please see http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/plugin_compatibility.html
       on how to target different products -->
  <depends>com.intellij.modules.lang</depends>

  <extensions defaultExtensionNs="com.intellij">
    <fileTypeFactory implementation="edument.perl6idea.filetypes.Perl6FileTypeFactory"/>
    <fileTypeDetector order="FIRST" implementation="edument.perl6idea.filetypes.Perl6FileTypeDetector"/>
    <moduleType id="PERL6_MODULE_TYPE" implementationClass="edument.perl6idea.module.Perl6ModuleType"/>
    <sdkType implementation="edument.perl6idea.sdk.Perl6SdkType"/>
    <configurationType implementation="edument.perl6idea.run.Perl6RunConfigurationType"/>
    <configurationType implementation="edument.perl6idea.testing.Perl6TestConfigurationType"/>
    <programRunner implementation="edument.perl6idea.debugger.Perl6DebugRunner"/>
    <programRunner implementation="edument.perl6idea.profiler.Perl6ProfileRunner"/>
    <executor implementation="edument.perl6idea.run.Perl6ProfileExecutor"/>
    <xdebugger.breakpointType implementation="edument.perl6idea.debugger.Perl6LineBreakpointType"/>
    <lang.syntaxHighlighterFactory language="Perl6" implementationClass="edument.perl6idea.highlighter.Perl6SyntaxHighlighterFactory"/>
    <lang.parserDefinition language="Perl6" implementationClass="edument.perl6idea.parsing.Perl6ParserDefinition"/>
    <colorSettingsPage implementation="edument.perl6idea.highlighter.Perl6ColorSettingsPage"/>
    <lang.formatter language="Perl6" implementationClass="edument.perl6idea.formatter.Perl6FormattingModelBuilder"/>
    <lang.braceMatcher language="Perl6" implementationClass="edument.perl6idea.editor.Perl6BraceMatcher"/>
    <lang.psiStructureViewFactory language="Perl6" implementationClass="edument.perl6idea.structureView.Perl6StructureViewFactory"/>
    <declarationRangeHandler key="edument.perl6idea.psi.Perl6PackageDecl"
                             implementationClass="edument.perl6idea.structureView.PackageDeclarationRangeHandler"/>
    <declarationRangeHandler key="edument.perl6idea.psi.Perl6RoutineDecl"
                             implementationClass="edument.perl6idea.structureView.RoutineDeclarationRangeHandler"/>
    <lang.commenter language="Perl6" implementationClass="edument.perl6idea.editor.Perl6Commenter"/>
    <lang.foldingBuilder language="Perl6" implementationClass="edument.perl6idea.editor.Perl6FoldingBuilder"/>
    <typedHandler implementation="edument.perl6idea.editor.SigilCompletionAutoPopupHandler"/>
    <additionalTextAttributes scheme="Default" file="colorSchemes/DefaultPerl6.xml"/>
    <additionalTextAttributes scheme="Darcula" file="colorSchemes/DarculaPerl6.xml"/>
    <annotator language="Perl6" implementationClass="edument.perl6idea.annotation.UndeclaredVariableAnnotator"/>
    <annotator language="Perl6" implementationClass="edument.perl6idea.annotation.UndeclaredRoutineAnnotator"/>
    <annotator language="Perl6" implementationClass="edument.perl6idea.annotation.UndeclaredPrivateMethod"/>
    <annotator language="Perl6" implementationClass="edument.perl6idea.annotation.UndeclaredAttribute"/>
    <annotator language="Perl6" implementationClass="edument.perl6idea.editor.SigSpaceAnnotator"/>
    <annotator language="Perl6" implementationClass="edument.perl6idea.annotation.LeadingZeroAnnotation"/>
    <annotator language="Perl6" implementationClass="edument.perl6idea.annotation.MethodNotOnRangeAnnotator"/>
    <annotator language="Perl6" implementationClass="edument.perl6idea.annotation.MissingUnitKeywordAnnotator"/>
    <annotator language="Perl6" implementationClass="edument.perl6idea.annotation.PodFormatAnnotator"/>
    <annotator language="Perl6" implementationClass="edument.perl6idea.annotation.SignatureAnnotator"/>
    <annotator language="Perl6" implementationClass="edument.perl6idea.annotation.UsedModuleAnnotator"/>
    <annotator language="Perl6" implementationClass="edument.perl6idea.annotation.NullRegexAnnotator"/>
    <annotator language="Perl6" implementationClass="edument.perl6idea.annotation.WheneverOutsideOfReactAnnotator"/>
    <annotator language="Perl6" implementationClass="edument.perl6idea.annotation.IllegalVariableDeclarationAnnotator"/>
    <annotator language="Perl6" implementationClass="edument.perl6idea.annotation.UnitSubAnnotator"/>
    <annotator language="Perl6" implementationClass="edument.perl6idea.annotation.NoEndpointRangeAnnotator"/>
    <annotator language="Perl6" implementationClass="edument.perl6idea.annotation.InterpolatedEVALAnnotator"/>
    <annotator language="Perl6" implementationClass="edument.perl6idea.annotation.MissingRoleMethodAnnotator"/>
    <annotator language="Perl6" implementationClass="edument.perl6idea.annotation.MyScopedVariableExportedAnnotator"/>
    <annotator language="Perl6" implementationClass="edument.perl6idea.annotation.IncomposableDoesAnnotator"/>
    <annotator language="Perl6" implementationClass="edument.perl6idea.annotation.MonitorUsageAnnotator"/>
    <annotator language="Perl6" implementationClass="edument.perl6idea.annotation.NonInheritableComposableDeclAnnotation"/>
    <annotator language="Perl6" implementationClass="edument.perl6idea.annotation.ProblematicReturn"/>
    <annotator language="Perl6" implementationClass="edument.perl6idea.annotation.MissingThingsAnnotator"/>
    <intentionAction>
      <className>edument.perl6idea.intention.RangeIntentionFix</className>
      <category>Range</category>
      <descriptionDirectoryName>RangeIntentionFix</descriptionDirectoryName>
    </intentionAction>
    <stubElementTypeHolder class="edument.perl6idea.parsing.Perl6ElementTypes" />
    <stubIndex implementation="edument.perl6idea.psi.stub.index.ProjectModulesStubIndex"/>
    <stubIndex implementation="edument.perl6idea.psi.stub.index.Perl6GlobalTypeStubIndex"/>
    <stubIndex implementation="edument.perl6idea.psi.stub.index.Perl6LexicalTypeStubIndex"/>
    <stubIndex implementation="edument.perl6idea.psi.stub.index.Perl6AllConstantsStubIndex"/>
    <stubIndex implementation="edument.perl6idea.psi.stub.index.Perl6AllAttributesStubIndex"/>
    <stubIndex implementation="edument.perl6idea.psi.stub.index.Perl6AllRoutinesStubIndex"/>
    <stubIndex implementation="edument.perl6idea.psi.stub.index.Perl6AllRegexesStubIndex"/>
    <gotoClassContributor implementation="edument.perl6idea.contribution.Perl6ClassNameContributor" />
    <gotoSymbolContributor implementation="edument.perl6idea.contribution.Perl6SymbolNameContributor" />
    <errorHandler implementation="edument.perl6idea.utils.Perl6ErrorReportSubmitter"/>
    <statementUpDownMover implementation="edument.perl6idea.editor.Perl6StatementMover"/>
    <treeStructureProvider implementation="edument.perl6idea.structureView.Perl6ProjectStructureProvider"/>
    <spellchecker.support language="Perl6" implementationClass="edument.perl6idea.editor.Perl6SpellCheckingStrategy"/>
    <enterHandlerDelegate implementation="edument.perl6idea.editor.Perl6EnterDelegate"/>
    <lang.findUsagesProvider language="Perl6" implementationClass="edument.perl6idea.findUsages.Perl6FindUsagesProvider"/>
    <lang.namesValidator language="Perl6" implementationClass="edument.perl6idea.rename.Perl6InputValidator"/>
    <renamePsiElementProcessor implementation="edument.perl6idea.rename.Perl6ModuleRenameProcessor"/>
    <renamePsiElementProcessor implementation="edument.perl6idea.rename.Perl6PsiElementProcessor"/>
    <usageTypeProvider implementation="edument.perl6idea.findUsages.Perl6UsageTypeProvider"/>
    <lang.smartEnterProcessor language="Perl6" implementationClass="edument.perl6idea.editor.smartEnter.Perl6SmartEnterProcessor"/>
    <lang.refactoringSupport language="Perl6" implementationClass="edument.perl6idea.refactoring.Perl6RefactoringSupportProvider"/>
    <enterBetweenBracesDelegate language="Perl6" implementationClass="edument.perl6idea.editor.Perl6EnterBetweenBracesDelegate"/>
    <projectOpenProcessor implementation="edument.perl6idea.project.Perl6ProjectOpenProcessor"/>
    <executor implementation="edument.perl6idea.coverage.CoverageExecutor"/>
    <programRunner implementation="edument.perl6idea.coverage.Perl6CoverageRunner"/>
    <consoleFilterProvider implementation="edument.perl6idea.run.Perl6OutputLinkProvider"/>
    <projectViewNodeDecorator implementation="edument.perl6idea.coverage.Perl6ProjectViewCoverageDecorator"/>
  </extensions>

  <actions>
    <action id="Perl6Plugin.NewScriptAction" class="edument.perl6idea.actions.NewScriptAction" text="Perl 6 Script"
            description="Create new Perl 6 script in current project" icon="/icons/camelia.png">
      <add-to-group group-id="NewGroup" anchor="after" relative-to-action="NewDir"/>
    </action>
    <action id="Perl6Plugin.NewModuleAction" class="edument.perl6idea.actions.NewModuleAction" text="Perl 6 Module"
            description="Create new Perl 6 module in current project" icon="/icons/camelia.png">
      <add-to-group group-id="NewGroup" anchor="after" relative-to-action="Perl6Plugin.NewScriptAction"/>
    </action>
    <action id="Perl6Plugin.NewTestAction" class="edument.perl6idea.actions.NewTestAction" text="Perl 6 Test"
            description="Create new Perl 6 test in current project" icon="/icons/camelia.png">
      <add-to-group group-id="NewGroup" anchor="after" relative-to-action="Perl6Plugin.NewModuleAction"/>
    </action>
    <action id="ExtractPrivateMethod" class="edument.perl6idea.actions.ExtractPrivateMethodAction" text="Private Method..."
            description="Turn this selected code fragment into a private method">
      <keyboard-shortcut keymap="$default" first-keystroke="ctrl alt P"/>
      <add-to-group group-id="IntroduceActionsGroup" anchor="after" relative-to-action="ExtractMethod"/>
    </action>
    <action id="ExtractRoutine" class="edument.perl6idea.actions.ExtractRoutineAction" text="Subroutine..."
            description="Turn this selected code fragment into a subroutine">
      <keyboard-shortcut keymap="$default" first-keystroke="ctrl alt R"/>
      <add-to-group group-id="IntroduceActionsGroup" anchor="before" relative-to-action="ExtractMethod"/>
    </action>
    <group id="Perl6Plugin.CoverageMenu">
      <action id="Perl6Plugin.HideCoverage" class="edument.perl6idea.coverage.Perl6CoverageHideAction"
              text="Hide Coverage Data" />
      <separator/>
    </group>
    <group id="CoveragePlatformMenu" popup="false">
      <separator/>
      <reference ref="Perl6Plugin.CoverageMenu"/>
      <add-to-group group-id="RunMenu" anchor="before" relative-to-action="DebugMainMenu"/>
    </group>
  </actions>

  <module-components>
    <component>
      <implementation-class>edument.perl6idea.module.Perl6MetaDataComponent</implementation-class>
    </component>
    <component>
      <implementation-class>edument.perl6idea.event.ModuleMetaChangeListener</implementation-class>
    </component>
  </module-components>

  <project-components>
    <component>
      <interface-class>edument.perl6idea.coverage.Perl6CoverageDataManager</interface-class>
      <implementation-class>edument.perl6idea.coverage.Perl6CoverageDataManagerImpl</implementation-class>
      <option name="workspace" value="true"/>
    </component>
  </project-components>

</idea-plugin>