<idea-plugin xmlns:xi="http://www.w3.org/2001/XInclude">
  <id>edument.perl6-idea-plugin</id>
  <version>2020.04.0</version>
  <name>Comma Community Edition (Raku Language Support)</name>
  <vendor email="info@commaide.com" url="https://commaide.com/">Edument Central Europe sro.</vendor>

  <description><![CDATA[
<p>
  The Comma Community plugin provides Raku language support for IDEA-based IDEs.
  Features include:
</p>

<ul>
  <li>Detailed and customizable syntax highlighting</li>
  <li>Auto-completion of various program elements</li>
  <li>Live code analysis to detect common problems</li>
  <li>Numerous code navigation features</li>
  <li>Rename refactoring</li>
  <li>Running scripts</li>
  <li>Running tests and viewing the results</li>
  <li>Debugging</li>
</ul>

<p>
  The same functionality is also available as an independent IDE. For more details, see
  <a href="https://commaide.com/">the Comma website</a>.
</p>

<p>
  Comma Complete is also available under a subscription model. It includes further
  refactorings, code coverage analysis, and profiling support. Visit
  <a href="https://commaide.com/">the Comma website</a> to learn more.
</p>
  ]]>
  </description>

  <change-notes><![CDATA[
<ul>
<li>A new grammar live preview feature. A grammar can be run against a specified input, and is
automatically re-run on code changes or input changes. A trace of the parse is displayed,
like that produced by Grammar::Tracer, except it&#39;s in a tree view and selecting an entry
shows which bit of the input text it matched. Further, double-clicking a matched part of
the input text shows the rule that matched it. It is possible to navigate onward to the
source code of the rule.</li>
<li>An extract regex refactor is now available. A selected portion of a rule in a grammar
can be extracted to a new token/rule/regex, with the choice of whether to capture or not.
In an anonymous regex outside of a grammar, this extracts a lexical named regex.</li>
<li>An intention is now available to turn a positional capture in a regex into a
named capture.</li>
<li>Cro template default parameter syntax is now parsed and handled correctly.</li>
<li>Add a Raku REPL with multiline commands, history, auto-completion of symbols, and the usual range of annotations and intentions</li>
<li>Add an intention to convert a ternary expression into a conditional construct</li>
<li>Add an intention to convert a non-capturing regex group into a named capture</li>
<li>Add an intention to convert a non-capturing regex group into a positional capture, with subsequent capture variables being renumbered appropriately</li>
<li>Improve completion and resolving of variables obtained from regex matching, supporting more code cases which implicitly set the <code>$/</code> variable and its matches</li>
<li>Allow renaming of Cro template parameters, as well as template sub and macro names</li>
<li>Correctly parse iteration over a variable in Cro template parameters (e.g. <code>@$foo</code>)</li>
<li>Correctly parse multiline comments in Cro templates</li>
<li>When a project SDK can&#39;t be used or is missing, now a notification is shown to the user suggesting to set one, instead of throwing an exception which could occur earlier</li>
<li>Shebang lines in scripts which end with <code>perl6</code>, <code>raku</code> and <code>rakudo</code> are used to detect Raku scripts with no file extension</li>
<li>Improve provision of positional capture variables (<code>$0</code>, <code>$1</code> etc): earlier, <code>/(a(b))/</code> would provide two variables, but now only a single one is provided</li>
<li>Improve provision of named capture variables: earlier <code>/$&lt;a&gt;=(&lt;foo&gt; &lt;bar&gt;)/</code> would provide three named variables, but now only a single one is provided</li>
<li>Do not highlight an unqualified call of a private method on a variable as undeclared if there is a private method in the current class of the same type, as Rakudo does</li>
<li>Make the intention which simplifies range literals work when the left range side includes an infix operator application (e.g. <code>$foo - 5 .. *</code>)</li>
<li>Fix formatting of array literals</li>
<li>Fix indentation when pressing enter during typing multiple traits</li>
<li>Fix a bug when during debugging the attributes of <code>self</code> on a <code>Match</code> objects were not shown</li>
<li>Prevent an exception in the annotation which checks <code>EVAL</code> interpolation usage</li>
<li>Add a Raku Code Style page to the settings, where numerous new formatting configuration options are available</li>
<li>Allow configuration of indentation size and continuation indent size (the defaults are as before)</li>
<li>Allow configuration of whether to use tabs or spaces (the default continues to be spaces)</li>
<li>Implement optional wrapping of long lines of code</li>
<li>Allow configuration of whether curly braces go on the same line of code or the line below (defaults to same line, as before). This can be configured separately for packages, routines, regexes, phasers, and other blocks</li>
<li>Implement wrapping and alignment for parameter lists, argument lists, trait lists, array initializers, and infix operands; these can all be configured</li>
<li>The formatter can now apply spacing rules, with over 20 different cases being configurable. For example, it&#39;s now possible to have formatting ensure there are spaces around infix operators</li>
<li>Implement Find Usages for Cro templates, to allow all usages of a template sub, macro, or variable to be found</li>
<li>Fix a parsing bug with the infix fatarrow operator, which could lead to some odd selection or formatting behaviors</li>
<li>Fix a bug that led to Comma thinking the cross built-in did not exist, when in fact it does</li>
<li>Fix external modules symbol loading on Window</li>
</ul>
  ]]></change-notes>

  <!-- please see http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/build_number_ranges.html for description -->
  <idea-version since-build="145.0"/>

  <!-- please see http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/plugin_compatibility.html
       on how to target different products -->
  <depends>com.intellij.modules.lang</depends>

  <extensionPoints>
    <xi:include href="/META-INF/meta/perl6-common.xml" xpointer="xpointer(/idea-plugin/extensionPoints/*)"/>
  </extensionPoints>

  <extensions defaultExtensionNs="edument.perl6idea">
    <frameworkCall implementation="edument.perl6idea.cro.CroFrameworkCall"/>
  </extensions>

  <extensions defaultExtensionNs="com.intellij">
    <xi:include href="/META-INF/meta/perl6-common.xml" xpointer="xpointer(/idea-plugin/extensions/*)"/>
    <runConfigurationProducer implementation="edument.perl6idea.testing.Perl6CommunityTestRunConfigurationProducer"/>
    <configurationType implementation="edument.perl6idea.run.Perl6CommunityRunConfigurationType"/>
    <configurationType implementation="edument.perl6idea.testing.Perl6CommunityTestConfigurationType"/>
    <configurationType implementation="edument.perl6idea.cro.run.Perl6CommunityCroRunConfigurationType"/>
    <lang.refactoringSupport language="Perl6" implementationClass="edument.perl6idea.refactoring.Perl6CommunityRefactoringSupportProvider"/>
  </extensions>

  <actions>
    <xi:include href="/META-INF/meta/perl6-common.xml" xpointer="xpointer(/idea-plugin/actions/*)"/>
    <action id="Perl6Plugin.UpgradeToCommaComplete" class="edument.perl6idea.actions.UpdateToCommaCompleteAction" text="Upgrade to Comma Complete "
            description="Visit Comma website" icon="/icons/camelia.png">
      <add-to-group group-id="HelpMenu" anchor="after" relative-to-action="About"/>
    </action>
  </actions>

  <module-components>
    <xi:include href="/META-INF/meta/perl6-common.xml" xpointer="xpointer(/idea-plugin/module-components/*)"/>
  </module-components>

  <project-components>
    <xi:include href="/META-INF/meta/perl6-common.xml" xpointer="xpointer(/idea-plugin/project-components/*)"/>
  </project-components>

</idea-plugin>