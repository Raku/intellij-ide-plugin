<idea-plugin xmlns:xi="http://www.w3.org/2001/XInclude">
  <id>edument.perl6-idea-plugin</id>
  <version>2019.10.0</version>
  <name>Comma Community Edition (Perl 6 Language Support)</name>
  <vendor email="info@commaide.com" url="https://commaide.com/">Edument Central Europe sro.</vendor>

  <description><![CDATA[
<p>
  The Comma Community plugin provides Perl 6 language support for IDEA-based IDEs.
  Features include:
</p>

<ul>
  <li>Detailed and customizable syntax highlighting</li>
  <li>Auto-completion of various program elements</li>
  <li>Live code analysis to detect common problems</li>
  <li>Numerous code navigation features</li>
  <li>Rename refactoring</li>
  <li>Running scripts</li>
  <li>Running tests and viewing the results</li>
  <li>Debugging</li>
</ul>

<p>
  The same functionality is also available as an independent IDE. For more details, see
  <a href="https://commaide.com/">the Comma website</a>.
</p>

<p>
  Comma Complete is also available under a subscription model. It includes further
  refactorings, code coverage analysis, and profiling support. Visit
  <a href="https://commaide.com/">the Comma website</a> to learn more.
</p>
  ]]>
  </description>

  <change-notes><![CDATA[
<ul>
<li>Add basic support for Cro&#39;s Template language, including syntax highlighting and editing features (code folding, brace matching, spell checking, etc.)</li>
<li>Provide in-IDE documentation for types and methods (local from the project, from external modules, and from Perl 6 builtins). These are extracted from documentation comments and the Perl 6 documentation respectively.</li>
<li>Parse package names (class, grammar etc) with adverbs (e.g. <code>class Foo:auth&lt;foo&gt;</code>)</li>
<li>Do not incorrectly recognize some cases of pair literals (e.g. <code>m =&gt; 42</code>) or sub calls (<code>s(42)</code>) as regex literals</li>
<li>Accept postfix application as a valid case in the range correctness annotator</li>
<li>The shebang line is now always added for new scripts, and only a MAIN subroutine stub is optional</li>
<li>Support completion and recognition of known nqp functions when the <code>use nqp</code> pragma is present</li>
<li>Fix a possible race related to setting breakpoints in the debugger</li>
<li>Make discovering of Log::Timeline server by Timeline viewer more robust</li>
<li>Recognize Raku file extensions (<code>.raku</code>, <code>.rakumod</code>, <code>.rakudoc</code>, <code>.rakutest</code>),</li>
<li>Recognize Raku executable names (<code>raku</code> and <code>rakudo</code>) the besides existing ones</li>
<li>Make the Parameter Info feature work with methods and subroutines imported from the CORE setting and external modules</li>
<li>Make completion of methods on a call work according to the specified return type of a routine (e.g. <code>Setty.new.elems.&lt;caret&gt;</code> will know the return type is Int and suggest methods accordingly)</li>
<li>Method completion now understands multi-methods</li>
<li>Show method signatures during method completion and sort candidates according to Method Resolution Order</li>
<li>Distinguish attribute getters from other methods and the show type of an attribute</li>
<li>Improve the performance of Go to Symbol feature and Method Completion</li>
<li>Make loading of external symbols not block project initialization and typing; symbols are also now loaded in parallel</li>
<li>Work correctly with symbols from external modules that are parametrized (e.g. <code>use MyModule :day;</code>)</li>
<li>Parameter Info now correctly behaves when a comma character is typed in a block that is an argument</li>
<li>Add an annotator that highlights cases when an array or hash variable in a list assignments will gobble all initialization values (e.g. <code>my ($one, @rest, $two) = 42, [42], 42</code>) and provide a quickfix for it</li>
<li>Annotation of calls to unknown private methods does not mark multimethods and external methods as unknown now</li>
<li>Add &#39;model&#39; keyword to support metaclasses provided by the Red ORM</li>
<li>The plugin updates Sdk caches on Sdk change action just as standalone Comma now</li>
<li>Multiline pod declarations <code>#|()</code> and <code>#=()</code> are now parsed correctly</li>
<li>An annotator that checks missing methods from classes now recognizes variable getters as methods, even in a case of a multi-variable declaration (e.g. <code>has ($.a, $.b)</code>)</li>
<li>Structure View shows all names declared in an attribute declaration with multiple variables (e.g. <code>has ($.a, $.b)</code>). The Go to Declaration feature works with such declarations too</li>
<li>The type of <code>$*IN</code>, <code>$*OUT</code>, <code>$*ERR*</code> is now correctly inferred to be <code>IO::Handle</code> instead of <code>IO::Special</code></li>
<li>Fix a bug in using fallback when an Sdk is available, but CORE symbols can&#39;t be loaded</li>
<li>Fix a rare exception on project indexing</li>
<li>Implement Parameter Info feature (<code>Ctrl-P</code> in default keymap, auto-popups on typing a call if enabled in settings) which shows the signatures of the available candidates</li>
<li>Implement Surround With feature (<code>Ctrl-Alt-T</code>) allowing to quickly surround expressions or statements with another construct, such as an <code>if</code> block, <code>for</code> loop, or contextualizer, for example, converting <code>from-json($file)</code> to <code>start { from-json($file) }</code>. Various capture groups are supported as surrounders for regexps</li>
<li>Add an annotation warning about usage of a return with arguments inside of a routine with <code>Nil</code> specified as return type</li>
<li>More cases of stacktrace locations are converted into clickable links in console output</li>
<li>Fix an exception on attempt to create a Perl 6 module file in the plugin</li>
</ul>
  ]]></change-notes>

  <!-- please see http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/build_number_ranges.html for description -->
  <idea-version since-build="145.0"/>

  <!-- please see http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/plugin_compatibility.html
       on how to target different products -->
  <depends>com.intellij.modules.lang</depends>

  <extensionPoints>
    <xi:include href="/META-INF/meta/perl6-common.xml" xpointer="xpointer(/idea-plugin/extensionPoints/*)"/>
  </extensionPoints>

  <extensions defaultExtensionNs="edument.perl6idea">
    <frameworkCall implementation="edument.perl6idea.cro.CroFrameworkCall"/>
  </extensions>

  <extensions defaultExtensionNs="com.intellij">
    <xi:include href="/META-INF/meta/perl6-common.xml" xpointer="xpointer(/idea-plugin/extensions/*)"/>
    <configurationType implementation="edument.perl6idea.run.Perl6CommunityRunConfigurationType"/>
    <configurationType implementation="edument.perl6idea.testing.Perl6CommunityTestConfigurationType"/>
    <configurationType implementation="edument.perl6idea.cro.run.Perl6CommunityCroRunConfigurationType"/>
    <lang.refactoringSupport language="Perl6" implementationClass="edument.perl6idea.refactoring.Perl6CommunityRefactoringSupportProvider"/>
  </extensions>

  <actions>
    <xi:include href="/META-INF/meta/perl6-common.xml" xpointer="xpointer(/idea-plugin/actions/*)"/>
    <action id="Perl6Plugin.UpgradeToCommaComplete" class="edument.perl6idea.actions.UpdateToCommaCompleteAction" text="Upgrade to Comma Complete "
            description="Visit Comma website" icon="/icons/camelia.png">
      <add-to-group group-id="HelpMenu" anchor="after" relative-to-action="About"/>
    </action>
  </actions>

  <module-components>
    <xi:include href="/META-INF/meta/perl6-common.xml" xpointer="xpointer(/idea-plugin/module-components/*)"/>
  </module-components>

  <project-components>
    <xi:include href="/META-INF/meta/perl6-common.xml" xpointer="xpointer(/idea-plugin/project-components/*)"/>
  </project-components>

</idea-plugin>