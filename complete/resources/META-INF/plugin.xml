<idea-plugin xmlns:xi="http://www.w3.org/2001/XInclude">
  <id>edument.perl6-idea-plugin</id>
  <version>2019.7.0</version>
  <name>Comma Complete Edition (Perl 6 Language Support)</name>
  <vendor email="info@commaide.com" url="https://commaide.com/">Edument Central Europe sro.</vendor>

  <description><![CDATA[
<p>
  The Comma Complete plugin provides Perl 6 language support for IDEA-based IDEs.
  Features include:
</p>

<ul>
  <li>Detailed and customizable syntax highlighting</li>
  <li>Auto-completion of various program elements</li>
  <li>Live code analysis to detect common problems</li>
  <li>Numerous code navigation features</li>
  <li>A range of refactorings, such as rename, extract variable, and extract method</li>
  <li>Running scripts</li>
  <li>Running tests and viewing the results</li>
  <li>Debugging</li>
  <li>Test coverage reporting</li>
  <li>Profiling</li>
</ul>

<p>
  The same functionality is also available as an independent IDE. For more details, see
  <a href="https://commaide.com/">the Comma website</a>.
</p>
  ]]>
  </description>

  <change-notes><![CDATA[
<ul>
<li>Add a new Call Graph view to the profiler results: it displays the graph of calls in a particular thread, allowing one to look into the hierarchy, see information about callers, callees, and other profiler data</li>

<li>Improve the UI of the profiler tab view: support buttons like Stop and Re-run, and show Console output in a separate tab</li>

<li>Fix a lot of issues related to symbol resolution and completion: numerous false positive cases were fixed, and a call to a multi method now suggests to choose an appropriate candidate instead of jumping to the first one. Performance of resolution was greatly increased for large projects</li>

<li>Fix debugger support on Windows (also requires upcoming Rakudo point release 2019.07.1)</li>

<li>Support block comments (<code>Ctrl+Shift+/</code>)</li>

<li>Add an annotation that suggests to replace redundant grep.first call chains into a single first call</li>

<li>Add an intention (<code>Alt+Enter</code>) allowing to change a Perl 6 package's type (e.g. turn grammar into class or role into monitor)</li>

<li>Add an intention to make private methods public: it updates both the private method definition and all its calls</li>

<li>Add an intention to make an attribute required if it does not have a default value</li>

<li>Add an annotation warning about BUILD and TWEAK being declared as methods instead of submethod, which is a common mistake, and a quickfix to change it</li>

<li>Add an annotation warning about redundant Array and Hash initialization (e.g. <code>my @a = []</code> or <code>my %a = ()</code>) and a quickfix to remove the empty initializer</li>

<li>Add an intention to replace the await Promise.allof construction with a plain await call</li>

<li>Add an annotation warning about <code>"perl6"</code> usage in string literals that is common for running a new Perl 6 process and suggest to change it into multiplatform <code>$*EXECUTABLE.absolute</code> call with a quickfix</li>

<li>Add an intention allowing to unparenthesize an expression</li>

<li>Add new icon for Profile run configuration</li>

<li>Deprecation warnings no longer break the displaying of test results when using the test runner</li>

<li>When, during debugging, a breakpoint is reached, the top stack frame now always shows its lexicals immediately</li>

<li>Fix misleading error notification about failed connection when the Perl 6 process to debug exits before debug server was able to connect</li>

<li>Fix inlining of variables into a colonpair (e.g. for a <code>:$a</code> variable <code>my $a = 5</code> is inlined as <code>a =&gt; 5</code>)</li>

<li>Fix a possible rare exception when anonymous variables are used</li>

<li>Fix an incorrect behavior related to the colonpair form of argument passing to a call when multiple arguments were handled as a single one, which mostly affects refactorings like Inline Code Block and some annotators</li>

<li>Fix a possible exception in the annotator that offers a quickfix to stub a private method using an unknown call</li>

<li>Fix a rare exception related to <code>META6.json</code> handling</li>

<li>Fix resolution and completion of an Enumeration that is not marked as is export</li>

<li>Fix a bug in the Extract Variable refactoring that generated incorrect code when user tried to extract a method call with an implicit caller (e.g. my <code>$a = %foo{.bar}</code> with <code>.bar</code> extracted)</li>

<li>Fix a bug where debugging after an SDK change used the Perl 6 prefix of the previous SDK</li>
</ul>
  ]]>
  </change-notes>

  <!-- please see http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/build_number_ranges.html for description -->
  <idea-version since-build="145.0"/>

  <!-- please see http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/plugin_compatibility.html
       on how to target different products -->
  <depends>com.intellij.modules.lang</depends>

  <extensionPoints>
    <xi:include href="/META-INF/meta/perl6-common.xml" xpointer="xpointer(/idea-plugin/extensionPoints/*)"/>
  </extensionPoints>

  <extensions defaultExtensionNs="edument.perl6idea">
    <frameworkCall implementation="edument.perl6idea.cro.CroFrameworkCall"/>
  </extensions>

  <extensions defaultExtensionNs="com.intellij">
    <xi:include href="/META-INF/meta/perl6-common.xml" xpointer="xpointer(/idea-plugin/extensions/*)"/>
    <configurationType implementation="edument.perl6idea.run.Perl6CompleteRunConfigurationType"/>
    <configurationType implementation="edument.perl6idea.testing.Perl6CompleteTestConfigurationType"/>
    <configurationType implementation="edument.perl6idea.cro.run.Perl6CompleteCroRunConfigurationType"/>
    <programRunner implementation="edument.perl6idea.coverage.Perl6CoverageRunner"/>
    <projectViewNodeDecorator implementation="edument.perl6idea.coverage.Perl6ProjectViewCoverageDecorator"/>
    <programRunner implementation="edument.perl6idea.profiler.run.Perl6ProfileRunner"/>
    <executor implementation="edument.perl6idea.run.Perl6ProfileExecutor"/>
    <lang.refactoringSupport language="Perl6" implementationClass="edument.perl6idea.refactoring.Perl6CompleteRefactoringSupportProvider"/>
    <inlineActionHandler implementation="edument.perl6idea.refactoring.inline.variable.Perl6InlineVariableActionHandler"/>
    <inlineActionHandler implementation="edument.perl6idea.refactoring.inline.call.Perl6InlineCallActionHandler"/>
  </extensions>

  <actions>
    <xi:include href="/META-INF/meta/perl6-common.xml" xpointer="xpointer(/idea-plugin/actions/*)"/>
    <action id="Perl6Plugin.ExtractPrivateMethod" class="edument.perl6idea.actions.ExtractPrivateMethodAction" text="Private Method..."
            description="Turn this selected code fragment into a private method">
      <keyboard-shortcut keymap="$default" first-keystroke="ctrl alt P"/>
      <add-to-group group-id="IntroduceActionsGroup" anchor="after" relative-to-action="ExtractMethod"/>
    </action>
    <action id="Perl6Plugin.ExtractRoutine" class="edument.perl6idea.actions.ExtractRoutineAction" text="Subroutine..."
            description="Turn this selected code fragment into a subroutine">
      <keyboard-shortcut keymap="$default" first-keystroke="ctrl alt R"/>
      <add-to-group group-id="IntroduceActionsGroup" anchor="before" relative-to-action="ExtractMethod"/>
    </action>
    <group id="Perl6Plugin.CoverageMenu">
      <action id="Perl6Plugin.HideCoverage" class="edument.perl6idea.coverage.Perl6CoverageHideAction"
              text="Hide Perl 6 Coverage Data" />
      <add-to-group group-id="CoverageMenu"/>
      <separator/>
    </group>
  </actions>

  <module-components>
    <xi:include href="/META-INF/meta/perl6-common.xml" xpointer="xpointer(/idea-plugin/module-components/*)"/>
  </module-components>

  <project-components>
    <xi:include href="/META-INF/meta/perl6-common.xml" xpointer="xpointer(/idea-plugin/project-components/*)"/>
    <component>
      <interface-class>edument.perl6idea.coverage.Perl6CoverageDataManager</interface-class>
      <implementation-class>edument.perl6idea.coverage.Perl6CoverageDataManagerImpl</implementation-class>
      <option name="workspace" value="true"/>
    </component>
  </project-components>

</idea-plugin>