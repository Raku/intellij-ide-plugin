<idea-plugin xmlns:xi="http://www.w3.org/2001/XInclude">
  <id>edument.perl6-idea-plugin</id>
  <version>2020.03.0</version>
  <name>Comma Complete Edition (Raku Language Support)</name>
  <vendor email="info@commaide.com" url="https://commaide.com/">Edument Central Europe sro.</vendor>

  <description><![CDATA[
<p>
  The Comma Complete plugin provides Raku language support for IDEA-based IDEs.
  Features include:
</p>

<ul>
  <li>Detailed and customizable syntax highlighting</li>
  <li>Auto-completion of various program elements</li>
  <li>Live code analysis to detect common problems</li>
  <li>Numerous code navigation features</li>
  <li>A range of refactorings, such as rename, extract variable, and extract method</li>
  <li>Running scripts</li>
  <li>Running tests and viewing the results</li>
  <li>Debugging</li>
  <li>Test coverage reporting</li>
  <li>Profiling</li>
</ul>

<p>
  The same functionality is also available as an independent IDE. For more details, see
  <a href="https://commaide.com/">the Comma website</a>.
</p>
  ]]>
  </description>

  <change-notes><![CDATA[
<ul>
<li>Add a Raku REPL with multiline commands, history, auto-completion of symbols, and the usual
range of annotations and intentions</li>
<li>Add an intention to convert a ternary expression into a conditional construct</li>
<li>Add an intention to convert a non-capturing regex group into a named capture</li>
<li>Add an intention to convert a non-capturing regex group into a positional capture, with subsequent capture variables being renumbered appropriately</li>
<li>Improve completion and resolving of variables obtained from regex matching, supporting more code cases which implicitly set the <code>$/</code> variable and its matches</li>
<li>Allow renaming of Cro template parameters, as well as template sub and macro names</li>
<li>Correctly parse iteration over a variable in Cro template parameters (e.g. <code>@$foo</code>)</li>
<li>Correctly parse multiline comments in Cro templates</li>
<li>When a project SDK can&#39;t be used or is missing, now a notification is shown to the user suggesting to set one, instead of throwing an exception which could occur earlier</li>
<li>Shebang lines in scripts which end with <code>perl6</code>, <code>raku</code> and <code>rakudo</code> are used to detect Raku scripts with no file extension</li>
<li>Improve provision of positional capture variables (<code>$0</code>, <code>$1</code> etc): earlier, <code>/(a(b))/</code> would provide two variables, but now only a single one is provided</li>
<li>Improve provision of named capture variables: earlier <code>/$&lt;a&gt;=(&lt;foo&gt; &lt;bar&gt;)/</code> would provide three named variables, but now only a single one is provided</li>
<li>Do not highlight an unqualified call of a private method on a variable as undeclared if there is a private method in the current class of the same type, as Rakudo does</li>
<li>Make the intention which simplifies range literals work when the left range side includes an infix operator application (e.g. <code>$foo - 5 .. *</code>)</li>
<li>Fix formatting of array literals</li>
<li>Fix indentation when pressing enter during typing multiple traits</li>
<li>Fix a bug when during debugging the attributes of <code>self</code> on a <code>Match</code> objects were not shown</li>
<li>Prevent an exception in the annotation which checks <code>EVAL</code> interpolation usages</li>
</ul>
  ]]>
  </change-notes>

  <!-- please see http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/build_number_ranges.html for description -->
  <idea-version since-build="145.0"/>

  <!-- please see http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/plugin_compatibility.html
       on how to target different products -->
  <depends>com.intellij.modules.lang</depends>

  <extensionPoints>
    <xi:include href="/META-INF/meta/perl6-common.xml" xpointer="xpointer(/idea-plugin/extensionPoints/*)"/>
  </extensionPoints>

  <extensions defaultExtensionNs="edument.perl6idea">
    <frameworkCall implementation="edument.perl6idea.cro.CroFrameworkCall"/>
  </extensions>

  <extensions defaultExtensionNs="com.intellij">
    <xi:include href="/META-INF/meta/perl6-common.xml" xpointer="xpointer(/idea-plugin/extensions/*)"/>
    <configurationType implementation="edument.perl6idea.run.Perl6CompleteRunConfigurationType"/>
    <configurationType implementation="edument.perl6idea.testing.Perl6CompleteTestConfigurationType"/>
    <configurationType implementation="edument.perl6idea.cro.run.Perl6CompleteCroRunConfigurationType"/>
    <programRunner implementation="edument.perl6idea.coverage.Perl6CoverageRunner"/>
    <projectViewNodeDecorator implementation="edument.perl6idea.coverage.Perl6ProjectViewCoverageDecorator"/>
    <programRunner implementation="edument.perl6idea.profiler.run.Perl6ProfileRunner"/>
    <executor implementation="edument.perl6idea.run.Perl6ProfileExecutor"/>
    <lang.refactoringSupport language="Perl6" implementationClass="edument.perl6idea.refactoring.Perl6CompleteRefactoringSupportProvider"/>
    <inlineActionHandler implementation="edument.perl6idea.refactoring.inline.variable.Perl6InlineVariableActionHandler"/>
    <inlineActionHandler implementation="edument.perl6idea.refactoring.inline.call.Perl6InlineCallActionHandler"/>
  </extensions>

  <actions>
    <xi:include href="/META-INF/meta/perl6-common.xml" xpointer="xpointer(/idea-plugin/actions/*)"/>
    <action id="Perl6Plugin.ExtractPrivateMethod" class="edument.perl6idea.actions.ExtractPrivateMethodAction" text="Private Method..."
            description="Turn this selected code fragment into a private method">
      <keyboard-shortcut keymap="$default" first-keystroke="ctrl alt P"/>
      <add-to-group group-id="IntroduceActionsGroup" anchor="after" relative-to-action="ExtractMethod"/>
    </action>
    <action id="Perl6Plugin.ExtractRoutine" class="edument.perl6idea.actions.ExtractRoutineAction" text="Subroutine..."
            description="Turn this selected code fragment into a subroutine">
      <keyboard-shortcut keymap="$default" first-keystroke="ctrl alt R"/>
      <add-to-group group-id="IntroduceActionsGroup" anchor="before" relative-to-action="ExtractMethod"/>
    </action>
    <action id="Perl6Plugin.ExtractRegex" class="edument.perl6idea.actions.ExtractRegexAction" text="Extract Rule..."
            description="Turn this selected code fragment into a separate regex">
      <keyboard-shortcut keymap="$default" first-keystroke="ctrl alt B"/>
      <add-to-group group-id="IntroduceActionsGroup" anchor="before" relative-to-action="ExtractMethod"/>
    </action>
    <group id="Perl6Plugin.CoverageMenu">
      <action id="Perl6Plugin.HideCoverage" class="edument.perl6idea.coverage.Perl6CoverageHideAction"
              text="Hide Raku Coverage Data" />
      <add-to-group group-id="CoverageMenu"/>
      <separator/>
    </group>
  </actions>

  <module-components>
    <xi:include href="/META-INF/meta/perl6-common.xml" xpointer="xpointer(/idea-plugin/module-components/*)"/>
  </module-components>

  <project-components>
    <xi:include href="/META-INF/meta/perl6-common.xml" xpointer="xpointer(/idea-plugin/project-components/*)"/>
    <component>
      <interface-class>edument.perl6idea.coverage.Perl6CoverageDataManager</interface-class>
      <implementation-class>edument.perl6idea.coverage.Perl6CoverageDataManagerImpl</implementation-class>
      <option name="workspace" value="true"/>
    </component>
  </project-components>

</idea-plugin>